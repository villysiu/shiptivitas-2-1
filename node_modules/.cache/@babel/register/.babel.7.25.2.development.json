{"{\"assumptions\":{},\"sourceRoot\":\"/Users/villysiu/Documents/Coding/Forage/YCombinator/ship-2/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/villysiu/Documents/Coding/Forage/YCombinator/ship-2\",\"filename\":\"/Users/villysiu/Documents/Coding/Forage/YCombinator/ship-2/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/villysiu/Documents/Coding/Forage/YCombinator/ship-2\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"DoWhileStatement\":{\"exit\":[null]},\"ForInStatement\":{\"exit\":[null]},\"ForStatement\":{\"exit\":[null]},\"WhileStatement\":{\"exit\":[null]},\"ForOfStatement\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"CallExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.25.2:development":{"value":{"code":"\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\nvar _betterSqlite = _interopRequireDefault(require(\"better-sqlite3\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar app = (0, _express[\"default\"])();\nvar port = 3001;\napp.use(_express[\"default\"].json());\napp.get('/', function (req, res) {\n  return res.status(200).send({\n    'message': 'SHIPTIVITY API. Read documentation to see API docs'\n  });\n});\n\n// We are keeping one connection alive for the rest of the life application for simplicity\nvar db = new _betterSqlite[\"default\"]('./clients.db');\n\n// Don't forget to close connection when server gets terminated\nvar closeDb = function closeDb() {\n  return db.close();\n};\nprocess.on('SIGTERM', closeDb);\nprocess.on('SIGINT', closeDb);\n\n/**\n * Validate id input\n * @param {any} id\n */\nvar validateId = function validateId(id) {\n  if (Number.isNaN(id)) {\n    return {\n      valid: false,\n      messageObj: {\n        'message': 'Invalid id provided.',\n        'long_message': 'Id can only be integer.'\n      }\n    };\n  }\n  var client = db.prepare('select * from clients where id = ? limit 1').get(id);\n  if (!client) {\n    return {\n      valid: false,\n      messageObj: {\n        'message': 'Invalid id provided.',\n        'long_message': 'Cannot find client with that id.'\n      }\n    };\n  }\n  return {\n    valid: true\n  };\n};\n\n/**\n * Validate priority input\n * @param {any} priority\n */\nvar validatePriority = function validatePriority(priority) {\n  if (Number.isNaN(priority)) {\n    return {\n      valid: false,\n      messageObj: {\n        'message': 'Invalid priority provided.',\n        'long_message': 'Priority can only be positive integer.'\n      }\n    };\n  }\n  return {\n    valid: true\n  };\n};\n\n/**\n * Get all of the clients. Optional filter 'status'\n * GET /api/v1/clients?status={status} - list all clients, optional parameter status: 'backlog' | 'in-progress' | 'complete'\n */\napp.get('/api/v1/clients', function (req, res) {\n  var status = req.query.status;\n  if (status) {\n    // status can only be either 'backlog' | 'in-progress' | 'complete'\n\n    if (status !== 'backlog' && status !== 'in-progress' && status !== 'complete') {\n      return res.status(400).send({\n        'message': 'Invalid status provided.',\n        'long_message': 'Status can only be one of the following: [backlog | in-progress | complete].'\n      });\n    }\n    var _clients = db.prepare('select * from clients where status = ?').all(status);\n    return res.status(200).send(_clients);\n  }\n  var statement = db.prepare('select * from clients');\n  var clients = statement.all();\n  return res.status(200).send(clients);\n});\n\n/**\n * Get a client based on the id provided.\n * GET /api/v1/clients/{client_id} - get client by id\n */\napp.get('/api/v1/clients/:id', function (req, res) {\n  var id = parseInt(req.params.id, 10);\n  var _validateId = validateId(id),\n    valid = _validateId.valid,\n    messageObj = _validateId.messageObj;\n  if (!valid) {\n    res.status(400).send(messageObj);\n  }\n  return res.status(200).send(db.prepare('select * from clients where id = ?').get(id));\n});\n\n/**\n * Update client information based on the parameters provided.\n * When status is provided, the client status will be changed\n * When priority is provided, the client priority will be changed with the rest of the clients accordingly\n * Note that priority = 1 means it has the highest priority (should be on top of the swimlane).\n * No client on the same status should not have the same priority.\n * This API should return list of clients on success\n *\n * PUT /api/v1/clients/{client_id} - change the status of a client\n *    Data:\n *      status (optional): 'backlog' | 'in-progress' | 'complete',\n *      priority (optional): integer,\n *\n */\n\n/** \n * setup Insomnia to accept JSON, \n * {\"priority\": 10000}\n * and in header: \n * Content-Type: application/json\n *\n*/\napp.put('/api/v1/clients/:id', function (req, res) {\n  var id = parseInt(req.params.id, 10);\n  var _validateId2 = validateId(id),\n    valid = _validateId2.valid,\n    messageObj = _validateId2.messageObj;\n  if (!valid) {\n    res.status(400).send(messageObj);\n  }\n  // console.log(req.body)\n  var _req$body = req.body,\n    status = _req$body.status,\n    priority = _req$body.priority;\n\n  // console.log(status, priority)\n\n  // let clients = db.prepare('select * from clients').all();\n  // const client = clients.find(client => client.id === id);\n\n  /* ---------- Update code below ----------*/\n  // \n  // scenarios:\n  // status && priority: \n  // new status === client.status ---> no change in lane\n  // new status !== client.status ---> change in lane\n  // in client (old) lane, update priority >= client.prioriy by deducting 1, (ie move upwards, pull client out)\n  // in new lane, update priority >= new prioity by adding 1 (move down to leave a spot to insert client)\n  // lastly update the client to new status and priority\n\n  // priority===null:\n  // add client to end of lane. \n  // update priority to total number of client in new status lane.\n\n  // status = null:\n  // client stays in same lane.\n  // update status to client current lane.\n\n  // edge cases: \n  // priority > total number of clients in the lane, add client to end of lane\n  // priority updated to total number of clients + 1\n\n  // priority <= 0,  add client to front of lane\n  // priority updated to 1\n\n  // status === null  && priority===null, return client\n\n  var client = db.prepare('select * from clients where id = ?').get(id);\n  if (!status && !priority) return res.status(200).send(client);\n  if (status) {\n    if (status !== 'backlog' && status !== 'in-progress' && status !== 'complete') {\n      return res.status(400).send({\n        'message': 'Invalid status provided.',\n        'long_message': 'Status can only be one of the following: [backlog | in-progress | complete].'\n      });\n    }\n  } else {\n    // !status\n    status = client.status;\n  }\n  var newLaneClientsCount = db.prepare('select count(id) as count from clients where status = ?').all(status)[0].count;\n  if (!priority) {\n    if (status !== client.status) priority = newLaneClientsCount + 1;else return res.status(200).send(client);\n  } else {\n    if (priority <= 0) priority = 1;else if (priority > newLaneClientsCount) {\n      if (status === client.status)\n        // already in lane, move to last\n        priority = newLaneClientsCount;else priority = newLaneClientsCount + 1;\n    }\n  }\n\n  // update the priority of the old lane\n  var oldLaneClients = db.prepare('select id, priority from clients where status = ? and priority >= ?').all(client.status, client.priority);\n  var _iterator = _createForOfIteratorHelper(oldLaneClients),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var olc = _step.value;\n      var _update = db.prepare('UPDATE clients SET priority = ? WHERE id = ?');\n      var _result = _update.run(olc.priority - 1, olc.id);\n    }\n\n    // update the priority of the new lane\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var newLaneClients = db.prepare('select id, priority from clients where status = ? and priority >= ?').all(status, priority);\n  var _iterator2 = _createForOfIteratorHelper(newLaneClients),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var nlc = _step2.value;\n      var _update2 = db.prepare('UPDATE clients SET priority = ? WHERE id = ?');\n      var _result2 = _update2.run(nlc.priority + 1, nlc.id);\n    }\n\n    // update the status and priority of the client\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var update = db.prepare('UPDATE clients SET status = ?, priority = ? WHERE id = ?');\n  var result = update.run(status, priority, id);\n  return res.status(200).send(db.prepare('select * from clients where id = ?').get(id));\n});\napp.listen(port, function () {\n  console.log(\"Server listening at http://localhost:\".concat(port));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2JldHRlclNxbGl0ZSIsImUiLCJfX2VzTW9kdWxlIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJyIiwidCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibGVuZ3RoIiwiX24iLCJGIiwicyIsIm4iLCJkb25lIiwidmFsdWUiLCJmIiwiVHlwZUVycm9yIiwibyIsImEiLCJ1IiwiY2FsbCIsIm5leHQiLCJfYXJyYXlMaWtlVG9BcnJheSIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsImFwcCIsImV4cHJlc3MiLCJwb3J0IiwidXNlIiwianNvbiIsImdldCIsInJlcSIsInJlcyIsInN0YXR1cyIsInNlbmQiLCJkYiIsIkRhdGFiYXNlIiwiY2xvc2VEYiIsImNsb3NlIiwicHJvY2VzcyIsIm9uIiwidmFsaWRhdGVJZCIsImlkIiwiTnVtYmVyIiwiaXNOYU4iLCJ2YWxpZCIsIm1lc3NhZ2VPYmoiLCJjbGllbnQiLCJwcmVwYXJlIiwidmFsaWRhdGVQcmlvcml0eSIsInByaW9yaXR5IiwicXVlcnkiLCJjbGllbnRzIiwiYWxsIiwic3RhdGVtZW50IiwicGFyc2VJbnQiLCJwYXJhbXMiLCJfdmFsaWRhdGVJZCIsInB1dCIsIl92YWxpZGF0ZUlkMiIsIl9yZXEkYm9keSIsImJvZHkiLCJuZXdMYW5lQ2xpZW50c0NvdW50IiwiY291bnQiLCJvbGRMYW5lQ2xpZW50cyIsIl9pdGVyYXRvciIsIl9zdGVwIiwib2xjIiwidXBkYXRlIiwicmVzdWx0IiwicnVuIiwiZXJyIiwibmV3TGFuZUNsaWVudHMiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwibmxjIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiL1VzZXJzL3ZpbGx5c2l1L0RvY3VtZW50cy9Db2RpbmcvRm9yYWdlL1lDb21iaW5hdG9yL3NoaXAtMi8iLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBEYXRhYmFzZSBmcm9tICdiZXR0ZXItc3FsaXRlMyc7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHBvcnQgPSAzMDAxO1xuXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcbiAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHsnbWVzc2FnZSc6ICdTSElQVElWSVRZIEFQSS4gUmVhZCBkb2N1bWVudGF0aW9uIHRvIHNlZSBBUEkgZG9jcyd9KTtcbn0pO1xuXG4vLyBXZSBhcmUga2VlcGluZyBvbmUgY29ubmVjdGlvbiBhbGl2ZSBmb3IgdGhlIHJlc3Qgb2YgdGhlIGxpZmUgYXBwbGljYXRpb24gZm9yIHNpbXBsaWNpdHlcbmNvbnN0IGRiID0gbmV3IERhdGFiYXNlKCcuL2NsaWVudHMuZGInKTtcblxuLy8gRG9uJ3QgZm9yZ2V0IHRvIGNsb3NlIGNvbm5lY3Rpb24gd2hlbiBzZXJ2ZXIgZ2V0cyB0ZXJtaW5hdGVkXG5jb25zdCBjbG9zZURiID0gKCkgPT4gZGIuY2xvc2UoKTtcbnByb2Nlc3Mub24oJ1NJR1RFUk0nLCBjbG9zZURiKTtcbnByb2Nlc3Mub24oJ1NJR0lOVCcsIGNsb3NlRGIpO1xuXG4vKipcbiAqIFZhbGlkYXRlIGlkIGlucHV0XG4gKiBAcGFyYW0ge2FueX0gaWRcbiAqL1xuY29uc3QgdmFsaWRhdGVJZCA9IChpZCkgPT4ge1xuICBpZiAoTnVtYmVyLmlzTmFOKGlkKSkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWxpZDogZmFsc2UsXG4gICAgICBtZXNzYWdlT2JqOiB7XG4gICAgICAnbWVzc2FnZSc6ICdJbnZhbGlkIGlkIHByb3ZpZGVkLicsXG4gICAgICAnbG9uZ19tZXNzYWdlJzogJ0lkIGNhbiBvbmx5IGJlIGludGVnZXIuJyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICBjb25zdCBjbGllbnQgPSBkYi5wcmVwYXJlKCdzZWxlY3QgKiBmcm9tIGNsaWVudHMgd2hlcmUgaWQgPSA/IGxpbWl0IDEnKS5nZXQoaWQpO1xuICBpZiAoIWNsaWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWxpZDogZmFsc2UsXG4gICAgICBtZXNzYWdlT2JqOiB7XG4gICAgICAnbWVzc2FnZSc6ICdJbnZhbGlkIGlkIHByb3ZpZGVkLicsXG4gICAgICAnbG9uZ19tZXNzYWdlJzogJ0Nhbm5vdCBmaW5kIGNsaWVudCB3aXRoIHRoYXQgaWQuJyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB0cnVlLFxuICB9O1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIHByaW9yaXR5IGlucHV0XG4gKiBAcGFyYW0ge2FueX0gcHJpb3JpdHlcbiAqL1xuY29uc3QgdmFsaWRhdGVQcmlvcml0eSA9IChwcmlvcml0eSkgPT4ge1xuICBpZiAoTnVtYmVyLmlzTmFOKHByaW9yaXR5KSkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWxpZDogZmFsc2UsXG4gICAgICBtZXNzYWdlT2JqOiB7XG4gICAgICAnbWVzc2FnZSc6ICdJbnZhbGlkIHByaW9yaXR5IHByb3ZpZGVkLicsXG4gICAgICAnbG9uZ19tZXNzYWdlJzogJ1ByaW9yaXR5IGNhbiBvbmx5IGJlIHBvc2l0aXZlIGludGVnZXIuJyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB0cnVlLFxuICB9XG59XG5cbi8qKlxuICogR2V0IGFsbCBvZiB0aGUgY2xpZW50cy4gT3B0aW9uYWwgZmlsdGVyICdzdGF0dXMnXG4gKiBHRVQgL2FwaS92MS9jbGllbnRzP3N0YXR1cz17c3RhdHVzfSAtIGxpc3QgYWxsIGNsaWVudHMsIG9wdGlvbmFsIHBhcmFtZXRlciBzdGF0dXM6ICdiYWNrbG9nJyB8ICdpbi1wcm9ncmVzcycgfCAnY29tcGxldGUnXG4gKi9cbmFwcC5nZXQoJy9hcGkvdjEvY2xpZW50cycsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBzdGF0dXMgPSByZXEucXVlcnkuc3RhdHVzO1xuICBpZiAoc3RhdHVzKSB7XG4gICAgLy8gc3RhdHVzIGNhbiBvbmx5IGJlIGVpdGhlciAnYmFja2xvZycgfCAnaW4tcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlJ1xuICAgIFxuICAgIGlmIChzdGF0dXMgIT09ICdiYWNrbG9nJyAmJiBzdGF0dXMgIT09ICdpbi1wcm9ncmVzcycgJiYgc3RhdHVzICE9PSAnY29tcGxldGUnKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLnNlbmQoe1xuICAgICAgICAnbWVzc2FnZSc6ICdJbnZhbGlkIHN0YXR1cyBwcm92aWRlZC4nLFxuICAgICAgICAnbG9uZ19tZXNzYWdlJzogJ1N0YXR1cyBjYW4gb25seSBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogW2JhY2tsb2cgfCBpbi1wcm9ncmVzcyB8IGNvbXBsZXRlXS4nLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGNsaWVudHMgPSBkYi5wcmVwYXJlKCdzZWxlY3QgKiBmcm9tIGNsaWVudHMgd2hlcmUgc3RhdHVzID0gPycpLmFsbChzdGF0dXMpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZChjbGllbnRzKTtcbiAgfVxuICBjb25zdCBzdGF0ZW1lbnQgPSBkYi5wcmVwYXJlKCdzZWxlY3QgKiBmcm9tIGNsaWVudHMnKTtcbiAgY29uc3QgY2xpZW50cyA9IHN0YXRlbWVudC5hbGwoKTtcbiAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGNsaWVudHMpO1xufSk7XG5cbi8qKlxuICogR2V0IGEgY2xpZW50IGJhc2VkIG9uIHRoZSBpZCBwcm92aWRlZC5cbiAqIEdFVCAvYXBpL3YxL2NsaWVudHMve2NsaWVudF9pZH0gLSBnZXQgY2xpZW50IGJ5IGlkXG4gKi9cbmFwcC5nZXQoJy9hcGkvdjEvY2xpZW50cy86aWQnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgaWQgPSBwYXJzZUludChyZXEucGFyYW1zLmlkICwgMTApO1xuICBjb25zdCB7IHZhbGlkLCBtZXNzYWdlT2JqIH0gPSB2YWxpZGF0ZUlkKGlkKTtcbiAgaWYgKCF2YWxpZCkge1xuICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKG1lc3NhZ2VPYmopO1xuICB9XG4gIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZChkYi5wcmVwYXJlKCdzZWxlY3QgKiBmcm9tIGNsaWVudHMgd2hlcmUgaWQgPSA/JykuZ2V0KGlkKSk7XG59KTtcblxuLyoqXG4gKiBVcGRhdGUgY2xpZW50IGluZm9ybWF0aW9uIGJhc2VkIG9uIHRoZSBwYXJhbWV0ZXJzIHByb3ZpZGVkLlxuICogV2hlbiBzdGF0dXMgaXMgcHJvdmlkZWQsIHRoZSBjbGllbnQgc3RhdHVzIHdpbGwgYmUgY2hhbmdlZFxuICogV2hlbiBwcmlvcml0eSBpcyBwcm92aWRlZCwgdGhlIGNsaWVudCBwcmlvcml0eSB3aWxsIGJlIGNoYW5nZWQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgY2xpZW50cyBhY2NvcmRpbmdseVxuICogTm90ZSB0aGF0IHByaW9yaXR5ID0gMSBtZWFucyBpdCBoYXMgdGhlIGhpZ2hlc3QgcHJpb3JpdHkgKHNob3VsZCBiZSBvbiB0b3Agb2YgdGhlIHN3aW1sYW5lKS5cbiAqIE5vIGNsaWVudCBvbiB0aGUgc2FtZSBzdGF0dXMgc2hvdWxkIG5vdCBoYXZlIHRoZSBzYW1lIHByaW9yaXR5LlxuICogVGhpcyBBUEkgc2hvdWxkIHJldHVybiBsaXN0IG9mIGNsaWVudHMgb24gc3VjY2Vzc1xuICpcbiAqIFBVVCAvYXBpL3YxL2NsaWVudHMve2NsaWVudF9pZH0gLSBjaGFuZ2UgdGhlIHN0YXR1cyBvZiBhIGNsaWVudFxuICogICAgRGF0YTpcbiAqICAgICAgc3RhdHVzIChvcHRpb25hbCk6ICdiYWNrbG9nJyB8ICdpbi1wcm9ncmVzcycgfCAnY29tcGxldGUnLFxuICogICAgICBwcmlvcml0eSAob3B0aW9uYWwpOiBpbnRlZ2VyLFxuICpcbiAqL1xuXG4vKiogXG4gKiBzZXR1cCBJbnNvbW5pYSB0byBhY2NlcHQgSlNPTiwgXG4gKiB7XCJwcmlvcml0eVwiOiAxMDAwMH1cbiAqIGFuZCBpbiBoZWFkZXI6IFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKlxuKi9cbmFwcC5wdXQoJy9hcGkvdjEvY2xpZW50cy86aWQnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgaWQgPSBwYXJzZUludChyZXEucGFyYW1zLmlkICwgMTApO1xuICBjb25zdCB7IHZhbGlkLCBtZXNzYWdlT2JqIH0gPSB2YWxpZGF0ZUlkKGlkKTtcbiAgaWYgKCF2YWxpZCkge1xuICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKG1lc3NhZ2VPYmopO1xuICB9XG4gIC8vIGNvbnNvbGUubG9nKHJlcS5ib2R5KVxuICBsZXQgeyBzdGF0dXMsIHByaW9yaXR5IH0gPSByZXEuYm9keTtcblxuICAvLyBjb25zb2xlLmxvZyhzdGF0dXMsIHByaW9yaXR5KVxuXG4gIC8vIGxldCBjbGllbnRzID0gZGIucHJlcGFyZSgnc2VsZWN0ICogZnJvbSBjbGllbnRzJykuYWxsKCk7XG4gIC8vIGNvbnN0IGNsaWVudCA9IGNsaWVudHMuZmluZChjbGllbnQgPT4gY2xpZW50LmlkID09PSBpZCk7XG5cbiAgLyogLS0tLS0tLS0tLSBVcGRhdGUgY29kZSBiZWxvdyAtLS0tLS0tLS0tKi9cbiAgLy8gXG4gIC8vIHNjZW5hcmlvczpcbiAgLy8gc3RhdHVzICYmIHByaW9yaXR5OiBcbiAgLy8gbmV3IHN0YXR1cyA9PT0gY2xpZW50LnN0YXR1cyAtLS0+IG5vIGNoYW5nZSBpbiBsYW5lXG4gIC8vIG5ldyBzdGF0dXMgIT09IGNsaWVudC5zdGF0dXMgLS0tPiBjaGFuZ2UgaW4gbGFuZVxuICAvLyBpbiBjbGllbnQgKG9sZCkgbGFuZSwgdXBkYXRlIHByaW9yaXR5ID49IGNsaWVudC5wcmlvcml5IGJ5IGRlZHVjdGluZyAxLCAoaWUgbW92ZSB1cHdhcmRzLCBwdWxsIGNsaWVudCBvdXQpXG4gIC8vIGluIG5ldyBsYW5lLCB1cGRhdGUgcHJpb3JpdHkgPj0gbmV3IHByaW9pdHkgYnkgYWRkaW5nIDEgKG1vdmUgZG93biB0byBsZWF2ZSBhIHNwb3QgdG8gaW5zZXJ0IGNsaWVudClcbiAgLy8gbGFzdGx5IHVwZGF0ZSB0aGUgY2xpZW50IHRvIG5ldyBzdGF0dXMgYW5kIHByaW9yaXR5XG5cbiAgLy8gcHJpb3JpdHk9PT1udWxsOlxuICAvLyBhZGQgY2xpZW50IHRvIGVuZCBvZiBsYW5lLiBcbiAgLy8gdXBkYXRlIHByaW9yaXR5IHRvIHRvdGFsIG51bWJlciBvZiBjbGllbnQgaW4gbmV3IHN0YXR1cyBsYW5lLlxuXG4gIC8vIHN0YXR1cyA9IG51bGw6XG4gIC8vIGNsaWVudCBzdGF5cyBpbiBzYW1lIGxhbmUuXG4gIC8vIHVwZGF0ZSBzdGF0dXMgdG8gY2xpZW50IGN1cnJlbnQgbGFuZS5cblxuICAvLyBlZGdlIGNhc2VzOiBcbiAgLy8gcHJpb3JpdHkgPiB0b3RhbCBudW1iZXIgb2YgY2xpZW50cyBpbiB0aGUgbGFuZSwgYWRkIGNsaWVudCB0byBlbmQgb2YgbGFuZVxuICAvLyBwcmlvcml0eSB1cGRhdGVkIHRvIHRvdGFsIG51bWJlciBvZiBjbGllbnRzICsgMVxuXG4gIC8vIHByaW9yaXR5IDw9IDAsICBhZGQgY2xpZW50IHRvIGZyb250IG9mIGxhbmVcbiAgLy8gcHJpb3JpdHkgdXBkYXRlZCB0byAxXG5cbiAgLy8gc3RhdHVzID09PSBudWxsICAmJiBwcmlvcml0eT09PW51bGwsIHJldHVybiBjbGllbnRcblxuXG4gIGNvbnN0IGNsaWVudCA9IGRiLnByZXBhcmUoJ3NlbGVjdCAqIGZyb20gY2xpZW50cyB3aGVyZSBpZCA9ID8nKS5nZXQoaWQpXG5cbiAgaWYoIXN0YXR1cyAmJiAhcHJpb3JpdHkpXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGNsaWVudCk7XG4gIFxuICBpZihzdGF0dXMpe1xuICAgIGlmIChzdGF0dXMgIT09ICdiYWNrbG9nJyAmJiBzdGF0dXMgIT09ICdpbi1wcm9ncmVzcycgJiYgc3RhdHVzICE9PSAnY29tcGxldGUnKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLnNlbmQoe1xuICAgICAgICAnbWVzc2FnZSc6ICdJbnZhbGlkIHN0YXR1cyBwcm92aWRlZC4nLFxuICAgICAgICAnbG9uZ19tZXNzYWdlJzogJ1N0YXR1cyBjYW4gb25seSBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogW2JhY2tsb2cgfCBpbi1wcm9ncmVzcyB8IGNvbXBsZXRlXS4nLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGVsc2VcbiAgeyAvLyAhc3RhdHVzXG4gICAgICBzdGF0dXMgPSBjbGllbnQuc3RhdHVzXG4gIH1cblxuICBjb25zdCBuZXdMYW5lQ2xpZW50c0NvdW50ID0gZGIucHJlcGFyZSgnc2VsZWN0IGNvdW50KGlkKSBhcyBjb3VudCBmcm9tIGNsaWVudHMgd2hlcmUgc3RhdHVzID0gPycpLmFsbChzdGF0dXMpWzBdLmNvdW50XG4gIGlmKCFwcmlvcml0eSl7XG4gICAgaWYoc3RhdHVzICE9PSBjbGllbnQuc3RhdHVzKVxuICAgICAgcHJpb3JpdHkgPSBuZXdMYW5lQ2xpZW50c0NvdW50ICsgMVxuICAgIGVsc2VcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZChjbGllbnQpO1xuICB9XG4gIGVsc2UgXG4gIHtcbiAgICAgIGlmKHByaW9yaXR5IDw9IDApXG4gICAgICAgIHByaW9yaXR5ID0gMVxuXG4gICAgICBlbHNlIGlmKHByaW9yaXR5ID4gbmV3TGFuZUNsaWVudHNDb3VudCl7XG4gICAgICAgIGlmKHN0YXR1cyA9PT0gY2xpZW50LnN0YXR1cykgLy8gYWxyZWFkeSBpbiBsYW5lLCBtb3ZlIHRvIGxhc3RcbiAgICAgICAgICBwcmlvcml0eSA9IG5ld0xhbmVDbGllbnRzQ291bnRcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHByaW9yaXR5ID0gbmV3TGFuZUNsaWVudHNDb3VudCsxXG4gICAgICB9ICBcbiAgfVxuICBcblxuXG5cbiAgICAvLyB1cGRhdGUgdGhlIHByaW9yaXR5IG9mIHRoZSBvbGQgbGFuZVxuICAgIGNvbnN0IG9sZExhbmVDbGllbnRzID0gZGIucHJlcGFyZSgnc2VsZWN0IGlkLCBwcmlvcml0eSBmcm9tIGNsaWVudHMgd2hlcmUgc3RhdHVzID0gPyBhbmQgcHJpb3JpdHkgPj0gPycpLmFsbChjbGllbnQuc3RhdHVzLCBjbGllbnQucHJpb3JpdHkpO1xuICAgIGZvcihsZXQgb2xjIG9mIG9sZExhbmVDbGllbnRzKXtcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IGRiLnByZXBhcmUoJ1VQREFURSBjbGllbnRzIFNFVCBwcmlvcml0eSA9ID8gV0hFUkUgaWQgPSA/Jyk7XG4gICAgICBjb25zdCByZXN1bHQgPSB1cGRhdGUucnVuKG9sYy5wcmlvcml0eS0xLCBvbGMuaWQpO1xuICAgIH0gXG5cbiAgICAvLyB1cGRhdGUgdGhlIHByaW9yaXR5IG9mIHRoZSBuZXcgbGFuZVxuICAgIGNvbnN0IG5ld0xhbmVDbGllbnRzID0gZGIucHJlcGFyZSgnc2VsZWN0IGlkLCBwcmlvcml0eSBmcm9tIGNsaWVudHMgd2hlcmUgc3RhdHVzID0gPyBhbmQgcHJpb3JpdHkgPj0gPycpLmFsbChzdGF0dXMsIHByaW9yaXR5KTtcbiAgICBmb3IobGV0IG5sYyBvZiBuZXdMYW5lQ2xpZW50cyl7XG4gICAgICBjb25zdCB1cGRhdGUgPSBkYi5wcmVwYXJlKCdVUERBVEUgY2xpZW50cyBTRVQgcHJpb3JpdHkgPSA/IFdIRVJFIGlkID0gPycpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdXBkYXRlLnJ1bihubGMucHJpb3JpdHkrMSwgbmxjLmlkKTtcbiAgICB9XG5cbiAgXG4gICAgLy8gdXBkYXRlIHRoZSBzdGF0dXMgYW5kIHByaW9yaXR5IG9mIHRoZSBjbGllbnRcbiAgICBjb25zdCB1cGRhdGUgPSBkYi5wcmVwYXJlKCdVUERBVEUgY2xpZW50cyBTRVQgc3RhdHVzID0gPywgcHJpb3JpdHkgPSA/IFdIRVJFIGlkID0gPycpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHVwZGF0ZS5ydW4oc3RhdHVzLCBwcmlvcml0eSwgaWQpO1xuICBcblxuXG5cbiAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGRiLnByZXBhcmUoJ3NlbGVjdCAqIGZyb20gY2xpZW50cyB3aGVyZSBpZCA9ID8nKS5nZXQoaWQpKTtcbn0pO1xuXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgY29uc29sZS5sb2coYFNlcnZlciBsaXN0ZW5pbmcgYXQgaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9YCk7XG59KTsiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQXNDLFNBQUFELHVCQUFBRyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSwyQkFBQUMsQ0FBQSxFQUFBSCxDQUFBLFFBQUFJLENBQUEseUJBQUFDLE1BQUEsSUFBQUYsQ0FBQSxDQUFBRSxNQUFBLENBQUFDLFFBQUEsS0FBQUgsQ0FBQSxxQkFBQUMsQ0FBQSxRQUFBRyxLQUFBLENBQUFDLE9BQUEsQ0FBQUwsQ0FBQSxNQUFBQyxDQUFBLEdBQUFLLDJCQUFBLENBQUFOLENBQUEsTUFBQUgsQ0FBQSxJQUFBRyxDQUFBLHVCQUFBQSxDQUFBLENBQUFPLE1BQUEsSUFBQU4sQ0FBQSxLQUFBRCxDQUFBLEdBQUFDLENBQUEsT0FBQU8sRUFBQSxNQUFBQyxDQUFBLFlBQUFBLEVBQUEsZUFBQUMsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsV0FBQUEsRUFBQSxXQUFBSCxFQUFBLElBQUFSLENBQUEsQ0FBQU8sTUFBQSxLQUFBSyxJQUFBLFdBQUFBLElBQUEsTUFBQUMsS0FBQSxFQUFBYixDQUFBLENBQUFRLEVBQUEsVUFB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","map":{"version":3,"names":["_express","_interopRequireDefault","require","_betterSqlite","e","__esModule","_createForOfIteratorHelper","r","t","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","o","a","u","call","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","app","express","port","use","json","get","req","res","status","send","db","Database","closeDb","close","process","on","validateId","id","Number","isNaN","valid","messageObj","client","prepare","validatePriority","priority","query","clients","all","statement","parseInt","params","_validateId","put","_validateId2","_req$body","body","newLaneClientsCount","count","oldLaneClients","_iterator","_step","olc","update","result","run","err","newLaneClients","_iterator2","_step2","nlc","listen","console","log","concat"],"sourceRoot":"/Users/villysiu/Documents/Coding/Forage/YCombinator/ship-2/","sources":["server.js"],"sourcesContent":["import express from 'express';\nimport Database from 'better-sqlite3';\n\nconst app = express();\nconst port = 3001;\n\napp.use(express.json());\napp.get('/', (req, res) => {\n  return res.status(200).send({'message': 'SHIPTIVITY API. Read documentation to see API docs'});\n});\n\n// We are keeping one connection alive for the rest of the life application for simplicity\nconst db = new Database('./clients.db');\n\n// Don't forget to close connection when server gets terminated\nconst closeDb = () => db.close();\nprocess.on('SIGTERM', closeDb);\nprocess.on('SIGINT', closeDb);\n\n/**\n * Validate id input\n * @param {any} id\n */\nconst validateId = (id) => {\n  if (Number.isNaN(id)) {\n    return {\n      valid: false,\n      messageObj: {\n      'message': 'Invalid id provided.',\n      'long_message': 'Id can only be integer.',\n      },\n    };\n  }\n  const client = db.prepare('select * from clients where id = ? limit 1').get(id);\n  if (!client) {\n    return {\n      valid: false,\n      messageObj: {\n      'message': 'Invalid id provided.',\n      'long_message': 'Cannot find client with that id.',\n      },\n    };\n  }\n  return {\n    valid: true,\n  };\n}\n\n/**\n * Validate priority input\n * @param {any} priority\n */\nconst validatePriority = (priority) => {\n  if (Number.isNaN(priority)) {\n    return {\n      valid: false,\n      messageObj: {\n      'message': 'Invalid priority provided.',\n      'long_message': 'Priority can only be positive integer.',\n      },\n    };\n  }\n  return {\n    valid: true,\n  }\n}\n\n/**\n * Get all of the clients. Optional filter 'status'\n * GET /api/v1/clients?status={status} - list all clients, optional parameter status: 'backlog' | 'in-progress' | 'complete'\n */\napp.get('/api/v1/clients', (req, res) => {\n  const status = req.query.status;\n  if (status) {\n    // status can only be either 'backlog' | 'in-progress' | 'complete'\n    \n    if (status !== 'backlog' && status !== 'in-progress' && status !== 'complete') {\n      return res.status(400).send({\n        'message': 'Invalid status provided.',\n        'long_message': 'Status can only be one of the following: [backlog | in-progress | complete].',\n      });\n    }\n    const clients = db.prepare('select * from clients where status = ?').all(status);\n    return res.status(200).send(clients);\n  }\n  const statement = db.prepare('select * from clients');\n  const clients = statement.all();\n  return res.status(200).send(clients);\n});\n\n/**\n * Get a client based on the id provided.\n * GET /api/v1/clients/{client_id} - get client by id\n */\napp.get('/api/v1/clients/:id', (req, res) => {\n  const id = parseInt(req.params.id , 10);\n  const { valid, messageObj } = validateId(id);\n  if (!valid) {\n    res.status(400).send(messageObj);\n  }\n  return res.status(200).send(db.prepare('select * from clients where id = ?').get(id));\n});\n\n/**\n * Update client information based on the parameters provided.\n * When status is provided, the client status will be changed\n * When priority is provided, the client priority will be changed with the rest of the clients accordingly\n * Note that priority = 1 means it has the highest priority (should be on top of the swimlane).\n * No client on the same status should not have the same priority.\n * This API should return list of clients on success\n *\n * PUT /api/v1/clients/{client_id} - change the status of a client\n *    Data:\n *      status (optional): 'backlog' | 'in-progress' | 'complete',\n *      priority (optional): integer,\n *\n */\n\n/** \n * setup Insomnia to accept JSON, \n * {\"priority\": 10000}\n * and in header: \n * Content-Type: application/json\n *\n*/\napp.put('/api/v1/clients/:id', (req, res) => {\n  const id = parseInt(req.params.id , 10);\n  const { valid, messageObj } = validateId(id);\n  if (!valid) {\n    res.status(400).send(messageObj);\n  }\n  // console.log(req.body)\n  let { status, priority } = req.body;\n\n  // console.log(status, priority)\n\n  // let clients = db.prepare('select * from clients').all();\n  // const client = clients.find(client => client.id === id);\n\n  /* ---------- Update code below ----------*/\n  // \n  // scenarios:\n  // status && priority: \n  // new status === client.status ---> no change in lane\n  // new status !== client.status ---> change in lane\n  // in client (old) lane, update priority >= client.prioriy by deducting 1, (ie move upwards, pull client out)\n  // in new lane, update priority >= new prioity by adding 1 (move down to leave a spot to insert client)\n  // lastly update the client to new status and priority\n\n  // priority===null:\n  // add client to end of lane. \n  // update priority to total number of client in new status lane.\n\n  // status = null:\n  // client stays in same lane.\n  // update status to client current lane.\n\n  // edge cases: \n  // priority > total number of clients in the lane, add client to end of lane\n  // priority updated to total number of clients + 1\n\n  // priority <= 0,  add client to front of lane\n  // priority updated to 1\n\n  // status === null  && priority===null, return client\n\n\n  const client = db.prepare('select * from clients where id = ?').get(id)\n\n  if(!status && !priority)\n    return res.status(200).send(client);\n  \n  if(status){\n    if (status !== 'backlog' && status !== 'in-progress' && status !== 'complete') {\n      return res.status(400).send({\n        'message': 'Invalid status provided.',\n        'long_message': 'Status can only be one of the following: [backlog | in-progress | complete].',\n      });\n    }\n  }\n  else\n  { // !status\n      status = client.status\n  }\n\n  const newLaneClientsCount = db.prepare('select count(id) as count from clients where status = ?').all(status)[0].count\n  if(!priority){\n    if(status !== client.status)\n      priority = newLaneClientsCount + 1\n    else\n      return res.status(200).send(client);\n  }\n  else \n  {\n      if(priority <= 0)\n        priority = 1\n\n      else if(priority > newLaneClientsCount){\n        if(status === client.status) // already in lane, move to last\n          priority = newLaneClientsCount\n        else\n          priority = newLaneClientsCount+1\n      }  \n  }\n  \n\n\n\n    // update the priority of the old lane\n    const oldLaneClients = db.prepare('select id, priority from clients where status = ? and priority >= ?').all(client.status, client.priority);\n    for(let olc of oldLaneClients){\n      const update = db.prepare('UPDATE clients SET priority = ? WHERE id = ?');\n      const result = update.run(olc.priority-1, olc.id);\n    } \n\n    // update the priority of the new lane\n    const newLaneClients = db.prepare('select id, priority from clients where status = ? and priority >= ?').all(status, priority);\n    for(let nlc of newLaneClients){\n      const update = db.prepare('UPDATE clients SET priority = ? WHERE id = ?');\n      const result = update.run(nlc.priority+1, nlc.id);\n    }\n\n  \n    // update the status and priority of the client\n    const update = db.prepare('UPDATE clients SET status = ?, priority = ? WHERE id = ?');\n    const result = update.run(status, priority, id);\n  \n\n\n\n  return res.status(200).send(db.prepare('select * from clients where id = ?').get(id));\n});\n\napp.listen(port, () => {\n  console.log(`Server listening at http://localhost:${port}`);\n});"],"mappings":"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","ignoreList":[]}},"mtime":1728323678406}}